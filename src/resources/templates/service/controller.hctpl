<?php
/**
 * @copyright 2018 innovationbase
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Contact InnovationBase:
 * E-mail: hello@innovationbase.eu
 * https://innovationbase.eu
 */

declare(strict_types = 1);

namespace {namespace};

use {serviceNamespace};
use {requestNamespace};
use {modelNamespace};

use HoneyComb\Core\Http\Controllers\HCBaseController;
use HoneyComb\Core\Http\Controllers\Traits\HCAdminListHeaders;
use HoneyComb\Starter\Helpers\HCFrontendResponse;
use Illuminate\Database\Connection;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;

/**
 * Class {serviceName}Controller
 * @package {namespace}
 */
class {serviceName}Controller extends HCBaseController
{
    use HCAdminListHeaders;

    /**
     * @var {serviceName}Service
     */
    protected $service;

    /**
     * @var Connection
     */
    private $connection;

    /**
     * @var HCFrontendResponse
     */
    private $response;

    /**
     * {serviceName}Controller constructor.
     * @param Connection $connection
     * @param HCFrontendResponse $response
     * @param {serviceName}Service $service
     */
    public function __construct(Connection $connection, HCFrontendResponse $response, {serviceName}Service $service)
    {
        $this->connection = $connection;
        $this->response = $response;
        $this->service = $service;
    }

    /**
     * Admin panel page view
     *
     * @return View
     */
    public function index(): View
    {
        $config = [
            'title' => trans('{translationLabel}'),
            'url' => route('admin.api.{urlName}'),
            'form' => route('admin.api.form-manager', ['{formName}']),
            'headers' => $this->getTableColumns(),
            'actions' => $this->getActions('{actionPrefix}'),
        ];

        return view('HCCore::admin.service.index', ['config' => $config]);
    }

    /**
     * Get admin page table columns settings
     *
     * @return array
     */
    public function getTableColumns(): array
    {
        $columns = [
            {columnList}
        ];

        return $columns;
    }

    /**
    * @param string $id
    * @return {serviceName}|null
    */
   public function getById (string $id): ? {serviceName}
   {
       return $this->service->getRepository()->findOrFail($id);
   }

   /**
    * Creating data list
    * @param {request} $request
    * @return JsonResponse
    */
   public function getListPaginate({request} $request): JsonResponse
   {
       return response()->json(
           $this->service->getRepository()->getListPaginate($request)
       );
   }

   /**
   * Create data list
   * @param {serviceName}Request $request
   * @return JsonResponse
   */
      public function getOptions({serviceName}Request $request): JsonResponse
      {
          return response()->json(
              $this->service->getRepository()->getOptions($request)
          );
      }

   {create}

   {update}

   {deleteSoft}

   {restore}

   {deleteForce}
}
